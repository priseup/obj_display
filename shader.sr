# fragment shader for material
#version 330 core

struct Material
{
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    float dissolve;
    float shininess;

    sampler2D ambientMap;
    sampler2D diffuseMap;
    sampler2D specularMap;
};

in vec3 Normal;
in vec3 Light;
in vec2 TexCoord;
in vec3 FragPos;

uniform vec3 ViewPos;
uniform vec3 LightPos;
uniform Material material;

out vec4 Color;

vec3 ambient = light * material.ambient * vec3(texture(Material.ambientMap, TexCoord));

vec3 lightDir = normalize(LightPos - FragPos);
vec3 viewDir = normalize(viewPos - FragPos);
vec3 reflectDir = reflect(-lightdir, Normal);

float diff = max(dot(Normal, lightDir), 0.0);
vec3 diffuse = Light * material.diffuse * diff * vec3(texture(material.diffuseMap, TexCoord));

float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
vec3 specular = Light * material.specular * spec * vec3(texture(material.specular), TexCoord);

Color = vec4(ambient + diffuse + specular, material.dissolve);

//////////////////////////////////////////////////////////////////
# fragment shader for light
#version 330 core

out vec3 Light

void main()
{
    Light = vec3(1.0);
}


//////////////////////////////////////////////////////////////////
# vertex shader
# most transform is done in world space coordinate
#version 330 core

layout (location = 0) in vec3 position;
layout (location = 1) in vec2 texcoord;
layout (location = 2) in vec3 normal;

out vec3 Normal;
out vec2 TexCoord;
out vec3 FragPos;

void main()
{
    gl_Position = projection * view * model * vec4(position, 1.0f);
    TexCoord = texcoord;
    FragPos = vec3(model * vec4(position, 1.0f));

    # if we apply a non-uniform scale
    Normal = mat3(transpose(inverse(model))) * normal;
    # if we (don't)apple a uniform scale
    # Normal = normal;
    Normal = normalize(Normal);
}


//////////////////////////////////////////////////////////////////
float ambientStrenghth = 0.1f;
vec3 ambient = ambientStrenghth * lightColor;

vec3 norm = normalize(Normal);
vec3 lightDir = normalize(lightPos - FragPos);

float diff = max(dot(norm, lightDir), 0.0);
vec3 diffuse = diff * lightColor;

float specularStrength = 0.5f;
vec3 viewDir = normalize(viewPos - FragPos);
vec3 reflectDir = reflect(-lightdir, norm);
float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
vec3 specular = specularStrength * spec * lightColor;

//////////////////////////////////////////////////////////////////
vec3 diffuse = light * diff * vec3(texture(Material.diffuseMap, TexCoord));
vec3 ambient = light * ambient * vec3(texture(Material.ambientMap, TexCoord));
vec3 specular = light * spec * vec3(texture(material.specular), TexCoord);
color = vec4(ambient + diffuse + specular, material.dissolve);
